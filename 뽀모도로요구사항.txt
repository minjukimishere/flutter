1. 화면
    1. TImerScreen(타이머화면)
2. 기능
    1. (시작하기) 타이머 시작, 1초씩 감소
    2. (일시정지) 타이머 일시정지, 버튼 텍스트 계속하기로 변경(계속하기, 포기하기)
    3. (계속하기) 타이머 계속하기, 버튼 텍스트 일시정지로 변경(일시정지, 포기하기)
    4. (포기하기) 작동 중이던 타이머 중지하고 초기화 (시작하기) 
    5. (휴식하기) 작업 타이머 끝나면 자동시작, 1초씩 감소, 파란색->녹색, 알림창
    6. (휴식종료) 휴식 타이머 끝나면 초기 화면으로 이동, 알림창(+달성한 뽀모도로 개수)
3. 모델
    없음


1. 타이머의 시간
2. 현재까지 완료한 뽀모도로의 개수 - >묵념회수
3. 현재 타이머의 상태

<상태status 정의할 때>
-> 어떤 상태가 필요한가?
1. 작업 중 (running)
2. 정지 (stopped)
3. 일시정지 (paused)
4. 휴식 중 (resting)

-> 어떤 이벤트에 따라 상태가 변경되어야 할까?
1. (버튼) 시작하기 버튼 누르기 (run)
2. (자동) 작업 타이머 시간이 끝나 휴식 타이머가 시작되는 경우 (reset)
3. (버튼) 일시정지 버튼 누를 경우(pause)
4. (버튼) 계속하기 버튼 누를 경우 (resume)
5. (버튼) 포기하기 버튼 누른 경우(stop) // 6. (자동) 휴식 타이머가 끝난 경우 (stop) 

1. run: Status.stopped ->Status.running
2. reset: Status. running-> Status.resting
3. pause:Status.running->Status.paused
4. resume:Status.paused->Status.running
5. stop:Status.paused or Status.runnig or Status.reseting->Status.stopped

#상태를 다루는 앱이라면 항상 이처럼 상태와 이벤트를 정리하고 구현하는 것이 좋다.
